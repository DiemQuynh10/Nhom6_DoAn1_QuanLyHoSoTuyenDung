@model IEnumerable<UngVien>
@using System.Text.Json
@using Azure.Core
@using Microsoft.AspNetCore.Mvc.Rendering
@using Nhom6_QLHoSoTuyenDung.Models.Entities
@using Nhom6_QLHoSoTuyenDung.Models.ViewModels
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData["Title"] = "Quản lý Ứng viên";
    var nguonLabels = ViewBag.NguonLabels as List<string> ?? new List<string>();
    var nguonValues = ViewBag.NguonValues as List<int> ?? new List<int>();
    var trangThaiLabels = ViewBag.TrangThaiLabels as List<string> ?? new List<string>();
    var trangThaiValues = ViewBag.TrangThaiValues as List<int> ?? new List<int>();
    var viTriLabels = ViewBag.ViTriLabels as List<string> ?? new List<string>();
    var viTriValues = ViewBag.ViTriValues as List<int> ?? new List<int>();
    int totalPages = ViewBag.TotalPages != null ? (int)ViewBag.TotalPages : 1;
    }

<style>
    .stat-card {
        background: white;
        border-radius: 14px;
        box-shadow: 0 3px 8px rgba(0, 0, 0, 0.05);
        padding: 1rem;
        height: 120px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        transition: all 0.2s ease;
    }

        .stat-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);
        }

    .chart-card {
        background-color: #ffffff;
        border-radius: 16px;
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.06);
        padding: 1.5rem;
        height: 340px;
    }

    .bg-stat-1 {
        background-color: #f0f7ff;
    }

    .pastel {
        border: none;
        border-radius: 12px;
        box-shadow: 0 3px 8px rgba(0, 0, 0, 0.04);
        transition: all 0.2s ease;
    }

        .pastel:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.08);
        }

    .pastel-blue {
        background-color: #e6f0ff;
    }

    .pastel-purple {
        background-color: #f2e8ff;
    }

    .pastel-yellow {
        background-color: #fff8e6;
    }

    .pastel-green {
        background-color: #e6fff2;
    }


</style>


<div class="container mt-4">
    <!-- NÚt chức năng -->
    <!-- TIÊU ĐỀ & NÚT CHỨC NĂNG – sticky -->
    @await Html.PartialAsync("_ControlBarPartial", new ThanhDieuKhienVM
{
    Title = "Quản lý Ứng viên",
    Icon = "bi bi-people-fill",
    CreateTargetId = "#addUngVienModal",
    ImportTargetId = "#importExcelModal",
    ShowFilterButton = true
})




    <!-- THÔNG BÁO -->
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert" id="successAlert">
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Đóng"></button>
        </div>
    }
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">@TempData["SuccessMessage"]</div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">@TempData["Error"]</div>
    }
    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-warning">
            <ul>
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <li>@error.ErrorMessage</li>
                }
            </ul>
        </div>
    }
    <!-- THỐNG KÊ -->
    <div class="row g-3 mb-4 px-3">
        <div class="col-md-3">
            <div class="card pastel pastel-blue text-center py-3">
                <div class="text-muted">Tổng ứng viên</div>
                <h4 class="mb-0 fw-bold">@ViewBag.TongUngVien</h4>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card pastel pastel-purple text-center py-3">
                <div class="text-muted">Mới tuần này</div>
                <h4 class="mb-0 fw-bold">@ViewBag.MoiTuanNay</h4>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card pastel pastel-yellow text-center py-3">
                <div class="text-muted">Đã phỏng vấn</div>
                <h4 class="mb-0 fw-bold">@ViewBag.DaPhongVan</h4>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card pastel pastel-green text-center py-3">
                <div class="text-muted">Đã tuyển</div>
                <h4 class="mb-0 fw-bold">@ViewBag.DaTuyen</h4>
            </div>
        </div>
    </div>


    <!-- BIỂU ĐỒ -->
    <div class="container px-4">
        <div class="row g-4">
            <div class="col-md-4">
                <div class="chart-card">
                    <h6>Ứng viên theo nguồn</h6>
                    <canvas id="chartNguon"></canvas>
                </div>
            </div>
            <div class="col-md-4">
                <div class="chart-card">
                    <h6>Ứng viên theo trạng thái</h6>
                    <canvas id="chartTrangThai"></canvas>
                </div>
            </div>
            <div class="col-md-4">
                <div class="chart-card">
                    <h6>Ứng viên theo vị trí</h6>
                    <canvas id="chartViTri"></canvas>
                </div>
            </div>
        </div>
    </div>



    <!-- DANH SÁCH ỨNG VIÊN -->
    <div class="container px-4 mt-4">
        <div class="scroll-container mb-4">
            @await Html.PartialAsync("_UngVienListPartial", Model)
        </div>
    </div>

    @await Html.PartialAsync("_FilterOffcanvasPartial", (BoLocViewModel)ViewBag.FilterViewModel)
<!-- Phân trang -->
<div class="d-flex justify-content-between align-items-center mt-3">
    <div>
        Hiển thị @(ViewBag.PageSize * (ViewBag.CurrentPage - 1) + 1)-@((ViewBag.PageSize * (ViewBag.CurrentPage - 1)) + Model.Count())
        của @ViewBag.TotalItems kết quả
    </div>
    <div>
        <form method="get" class="d-inline">
            <label>Hiển thị:</label>
            <select name="pageSize" onchange="this.form.submit()" class="form-select d-inline w-auto">
                <option value="10" selected="@(ViewBag.PageSize == 10 ? "selected" : null)">10</option>
                <option value="25" selected="@(ViewBag.PageSize == 25 ? "selected" : null)">25</option>
                <option value="50" selected="@(ViewBag.PageSize == 50 ? "selected" : null)">50</option>
                <option value="100" selected="@(ViewBag.PageSize == 100 ? "selected" : null)">100</option>
            </select>
        </form>


        <ul class="pagination d-inline-flex ms-3">
            <li class="page-item @(ViewBag.CurrentPage == 1 ? "disabled" : "")">
                <a class="page-link" href="?page=@(ViewBag.CurrentPage - 1)&pageSize=@ViewBag.PageSize">‹</a>
            </li>

            @for (int i = 1; i <= (int)ViewBag.TotalPages; i++)
            {
                <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                    <a class="page-link" href="?page=@i&pageSize=@ViewBag.PageSize">@i</a>
                </li>
            }

            <li class="page-item @(ViewBag.CurrentPage == ViewBag.TotalPages ? "disabled" : "")">
                <a class="page-link" href="?page=@(ViewBag.CurrentPage + 1)&pageSize=@ViewBag.PageSize">›</a>
            </li>
        </ul>
    </div>
</div>
<div class="modal fade" id="cvModal" tabindex="-1" aria-labelledby="cvModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cvModalLabel">Xem CV</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
            </div>
            <div class="modal-body">
                <iframe id="cvViewer" width="100%" height="600px" frameborder="0"></iframe>
            </div>
        </div>
    </div>
</div>
<!-- MODAL NHẬP EXCEL -->
<div class="modal fade" id="importExcelModal" tabindex="-1" aria-labelledby="importExcelModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form asp-action="ImportFromExcel" enctype="multipart/form-data" method="post">
                <div class="modal-header">
                    <h5 class="modal-title" id="importExcelModalLabel">📥 Nhập ứng viên từ Excel</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Chọn file Excel (.xlsx)</label>
                        <input type="file" name="excelFile" class="form-control" accept=".xlsx" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <a href="~/templates/import-ungvien-chuan.xlsx" class="btn btn-outline-secondary" download>⬇️ File mẫu</a>
                    <button type="submit" class="btn btn-primary">Nhập</button>
                </div>
            </form>
        </div>
    </div>
</div>
<!-- FORM THÊM ỨNG VIÊN -->
<div class="modal fade" id="addUngVienModal" tabindex="-1">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Thêm Ứng viên</h5>
                <button class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form asp-action="CapNhatLinkCVHangLoat" method="post" class="d-inline">
                <button type="submit" class="btn btn-warning btn-sm">
                    🔄 Cập nhật Link CV hàng loạt
                </button>
            </form>
            <div class="modal-body">
                @await Html.PartialAsync("_CreateFormPartial", new Nhom6_QLHoSoTuyenDung.Models.Entities.UngVien())
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/chart-colors.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function toggleForm() {
            var form = document.getElementById("formContainer");
            form.style.display = form.style.display === "none" ? "block" : "none";
        }
        function toggleUpload() {
            var form = document.getElementById("uploadContainer");
            form.style.display = form.style.display === "none" ? "block" : "none";
        }
        function toggleFilter() {
            var form = document.getElementById("filterContainer");
            form.style.display = form.style.display === "none" ? "block" : "none";
        }
    </script>
    <script>
        function toggleForm() {
            var form = document.getElementById("formContainer");
            form.style.display = form.style.display === "none" ? "block" : "none";
        }

            
                const dataNguon = {
            labels: ["LinkedIn", "Website công ty", "Giới thiệu", "Khác"],
            datasets: [{
                data: @Html.Raw(JsonSerializer.Serialize(ViewBag.NguonValues)),
                 backgroundColor: ChartColors.pieColors
            }]
        };

        const dataTrangThai = {
            labels: @Html.Raw(JsonSerializer.Serialize(ViewBag.TrangThaiLabels)),
            datasets: [{
                data: @Html.Raw(JsonSerializer.Serialize(ViewBag.TrangThaiValues)),
                backgroundColor: ChartColors.barColors
            }]
        };

        const dataViTri = {
            labels: @Html.Raw(JsonSerializer.Serialize(ViewBag.ViTriLabels)),
            datasets: [{
                data: @Html.Raw(JsonSerializer.Serialize(ViewBag.ViTriValues)),
                backgroundColor: ChartColors.barColors
            }]
        };


        new Chart(document.getElementById('chartNguon'), {
            type: 'doughnut',
            data: dataNguon,
            options: {
                responsive: true,
                plugins: { legend: { display: true } }
            }
        });

        new Chart(document.getElementById('chartTrangThai'), {
            type: 'bar',
            data: dataTrangThai,
            options: {
                responsive: true,
                plugins: { legend: { display: false } },
                scales: { y: { beginAtZero: true } }
            }
        });

        new Chart(document.getElementById('chartViTri'), {
            type: 'bar',
            data: dataViTri,
            options: {
                responsive: true,
                plugins: { legend: { display: false } },
                scales: { y: { beginAtZero: true } }
            }
        });

        function xemLichPhongVan(ungVienId) {
            fetch(`/LichPhongVans/ByUngVien?id=${ungVienId}`)
                .then(res => res.text())
                .then(html => {
                    Swal.fire({
                        title: 'Lịch phỏng vấn',
                        html: html,
                        showCloseButton: true,
                        showConfirmButton: false,
                        width: 600
                    });
                });
        }

        function showChiTiet(ungVienId) {
            fetch(`/UngViens/Details?id=${ungVienId}`)
                .then(res => res.text())
                .then(html => {
                    Swal.fire({
                        title: 'Chi tiết ứng viên',
                        html: html,
                        showCloseButton: true,
                        showConfirmButton: false,
                        width: 600
                    });
                });
        }
    </script>
    <script>
        function showCV(url) {
            const viewer = document.getElementById("cvViewer");
            viewer.src = url;
            const modal = new bootstrap.Modal(document.getElementById('cvModal'));
            modal.show();
        }
    </script>
    <script>
        window.addEventListener('DOMContentLoaded', () => {
            const alert = document.getElementById("successAlert");
            if (alert) {
                setTimeout(() => {
                    const bsAlert = bootstrap.Alert.getOrCreateInstance(alert);
                    bsAlert.close();
                }, 3000);
            }
            // ✅ Mở lại form Thêm nếu có lỗi validate
        @if (!ViewData.ModelState.IsValid)
        {
            <text>document.getElementById("formContainer").style.display = "block";</text>
        }
        });
    </script>
    <script>
        window.addEventListener('DOMContentLoaded', () => {
            const alert = document.getElementById("successAlert");
            if (alert) {
                setTimeout(() => {
                    const bsAlert = bootstrap.Alert.getOrCreateInstance(alert);
                    bsAlert.close();
                }, 3000);
            }

            // ✅ Mở lại modal nếu form thêm ứng viên bị lỗi
        @if (!ViewData.ModelState.IsValid)
        {
            <text>
                            var addModal = new bootstrap.Modal(document.getElementById('addUngVienModal'));
                            addModal.show();
            </text>
        }
        });
    </script>
    <script>
        function moPopupTaoLich(ungVienId) {
            fetch(`/LichPhongVans/FormTaoLich?ungVienId=${ungVienId}`)
                .then(res => res.text())
                .then(html => {
                    Swal.fire({
                        title: 'Tạo lịch phỏng vấn',
                        html: html,
                        showCloseButton: true,
                        showConfirmButton: false,
                        width: 800
                    });
                });
        }

        function moFormTaoLich(ungVienId) {
            fetch(`/LichPhongVans/TaoLichPopup?ungVienId=${ungVienId}`)
                .then(res => res.text())
                .then(html => {
                    Swal.fire({
                        title: 'Tạo lịch phỏng vấn',
                        html: html,
                        showCloseButton: true,
                        showConfirmButton: false,
                        width: 700,
                        didOpen: () => {
                                    const form = document.getElementById('formTaoLich');
        form.addEventListener('submit', function (e) {
            e.preventDefault();

            const thoiGianInput = form.querySelector('input[name="ThoiGian"]');
            const selectedTime = new Date(thoiGianInput.value);
            const now = new Date();

            if (selectedTime < now) {
                Swal.fire('❌ Lỗi', 'Không thể tạo lịch với thời gian trong quá khứ.', 'error');
                return;
            }

            const formData = new FormData(form);
            fetch('/LichPhongVans/CreateLichFromPopup', {
                method: 'POST',
                body: formData
            })
            .then(res => res.json())
            .then(result => {
                if (result.success) {
                    Swal.fire('✅ Thành công', result.message, 'success')
                        .then(() => location.reload());
                } else {
                    Swal.fire('❌ Lỗi', result.message, 'error');
                }
            })
            .catch(() => {
                Swal.fire('❌ Lỗi', 'Gửi dữ liệu thất bại!', 'error');
            });
        });
                        }
                    });
                });
        }

    </script>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                tooltipTriggerList.forEach(function (el) {
                    new bootstrap.Tooltip(el);
                });
            });
        </script>
}
